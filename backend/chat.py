from connection import get_db_connection
from datetime import datetime

# Conecta ao MongoDB
db = get_db_connection()
colecao = db["entregas"]  # coleÃ§Ã£o que vocÃª criou no NoSQLBooster


def chat(op, numero_pedido=None):
    if op == 1:
        return "O sistema consiste em 3 partes principais e a forma de ter acesso a elas Ã© clicando nas opÃ§Ãµes no menu Ã  esquerda da tela. A primeira Ã© o Dashboard que traz anÃ¡lises rÃ¡pidas e relevantes para as atividades do dia a dia. A segunda Ã© o cadastro de entregas, onde vocÃª clica para criar uma nova entrega e sÃ³ necessita preencher as informaÃ§Ãµes que sÃ£o requisitadas. Por fim, o chatbot Ã© um meio de obter respostas rÃ¡pidas e relevantes do sistema, por exemplo sobre como utilizar o sistema, entregas do dia, entregas pendentes, dentre outras."
    elif op == 2:
        return "Para cadastrar uma nova entrega Ã© necessÃ¡rio clicar no botÃ£o de 'Cadastro' no menu ou'Adicionar Nova Entrega' atravÃ©s da aba do Dashboard. Feito isso, basta preencher o formulÃ¡rio com todas as informaÃ§Ãµes referentes a entrega e clicar no botÃ£o 'Salvar Entrega'.\n Caso seja necessÃ¡rio existe um botÃ£o de limpar formulÃ¡rio."
    elif op == 3:
        return "O Dashboard serve como uma anÃ¡lise a respeito das suas atividades recentes, como a quantidade de entregas cadastradas, entregas feitas, entregas pendentes, dentre outras. Para acessÃ¡-lo basta clicar no botÃ£o 'Dashboard' no menu."
    elif op == 4:
        # Data de hoje
        hoje = datetime.now().date()

        # Busca de entregas criadas hoje
        entregas = colecao.find({
            "data_criacao": {
                "$gte": datetime.combine(hoje, datetime.min.time()),
                "$lt": datetime.combine(hoje, datetime.max.time())
            }
        })

        # Resposta
        resposta = "ğŸ“¦ Entregas do dia:\n"
        encontrou = False
        for entrega in entregas:
            resposta += f"- Pedido: {entrega['numero_pedido']}, Cliente: {entrega['nome_cliente']}, EndereÃ§o: {entrega['endereco_completo']}\n"
            encontrou = True

        if not encontrou:
            resposta = "Nenhuma entrega cadastrada para hoje."

        return resposta
    elif op == 5:
        # Data de hoje
        hoje = datetime.now().date()

        # Busca entregas com status "Em andamento"
        entregas = colecao.find({
            "status": {"$regex": "^em andamento$", "$options": "i"},
            "data_criacao": {
                "$gte": datetime.combine(hoje, datetime.min.time()),
                "$lt": datetime.combine(hoje, datetime.max.time())
            }
        })

        # Resposta
        resposta = "ğŸ“‹ Entregas pendentes do dia:\n"
        encontrou = False
        for entrega in entregas:
            resposta += f"- Pedido: {entrega['numero_pedido']}, Cliente: {entrega['nome_cliente']}, EndereÃ§o: {entrega['endereco_completo']}\n"
            encontrou = True

        if not encontrou:
            resposta = "Nenhuma entrega pendente cadastrada para hoje."

        return resposta
    elif op == 6:
        # Data de hoje
        hoje = datetime.now().date()

        # Busca de entregas com status "ConcluÃ­da"
        entregas = colecao.find({
            "status": {"$regex": "^concluÃ­da$", "$options": "i"},
            "data_criacao": {
                "$gte": datetime.combine(hoje, datetime.min.time()),
                "$lt": datetime.combine(hoje, datetime.max.time())
            }
        })

        # Resposta
        resposta = "âœ… Entregas concluÃ­das do dia:\n"
        encontrou = False
        for entrega in entregas:
            resposta += f"- Pedido: {entrega['numero_pedido']}, Cliente: {entrega['nome_cliente']}, EndereÃ§o: {entrega['endereco_completo']}\n"
            encontrou = True

        if not encontrou:
            resposta = "Nenhuma entrega concluÃ­da cadastrada para hoje."

        return resposta
    elif op == 7:
        if not numero_pedido:
            return "Por favor, informe o nÃºmero do pedido que deseja consultar."

        # Busca pelo identificador da entrega
        entrega = colecao.find_one({
            "numero_pedido": {"$regex": f"^{numero_pedido}$", "$options": "i"}
        })

        if not entrega:
            return f"Nenhuma entrega encontrada com o nÃºmero de pedido {numero_pedido}."

        # Resposta
        resposta = (
            f"ğŸ“¦ InformaÃ§Ãµes da entrega:\n"
            f"- Pedido: {entrega['numero_pedido']}\n"
            f"- Cliente: {entrega['nome_cliente']}\n"
            f"- EndereÃ§o: {entrega['endereco_completo']}\n"
            f"- Status: {entrega['status']}\n"
            f"- DescriÃ§Ã£o: {entrega['descricao_entrega']}"
        )

        return resposta